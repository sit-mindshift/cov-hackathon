name: CI/CD
on:
  push:
    branches:
    - Rotfuks-patch-1

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  SERVER_DB: shopsafe-db
  SERVER_IMAGE: shopsafe-server
  VIEW_IMAGE: shopsafe-view
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GKE_KEY: ${{ secrets.GKE_AUTH_BASE64 }}
  BACKEND_WORKING_DIRECTORY: ./backend
  REGISTRY_HOSTNAME: gcr.io
  
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@master

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: $GKE_EMAIL
        service_account_key: $GKE_KEY        
    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: gcloud auth configure-docker | gcloud info
    
    # Gradle Build
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.BACKEND_WORKING_DIRECTORY }}
    - name: Build with Gradle
      run: ./gradlew build
      working-directory: ${{ env.BACKEND_WORKING_DIRECTORY }} 
    - name: Docker
      run: |        
        docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          --build-arg JAR_FILE=build/libs/*.jar .
      working-directory: ${{ env.BACKEND_WORKING_DIRECTORY }}
        
     # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
    
    # Deploy the Docker image to the GKE cluster
    # kubectl set image deployment/"$SERVER_IMAGE" "$SERVER_IMAGE"="eu.gcr.io/$GKE_PROJECT/$SERVER_IMAGE:$GITHUB_SHA"
    #- name: Deploy Server
    #  run: |
    #    gcloud container clusters get-credentials "$GKE_SERVER_CLUSTER" --zone="$GKE_ZONE" --project="$GKE_PROJECT"
    #    kubectl expose deployment/"$IMAGE" --type=LoadBalancer --port 8080 --target-port 8080
    # kubectl set image deployment/"$SERVER_IMAGE" "$SERVER_IMAGE"="eu.gcr.io/$GKE_PROJECT/$SERVER_IMAGE:$GITHUB_SHA"
        
        
    # Deploy the Docker image to the GKE cluster
    #- name: Validate Services
    #  run: | 
    #    kubectl get service
        
